<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Structure on SDTTTTT&#39;s Smelly fish Rotten shrimp 📓</title>
    <link>https://sdttttt.github.io/tags/data-structure/</link>
    <description>Recent content in Data Structure on SDTTTTT&#39;s Smelly fish Rotten shrimp 📓</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright © 2020, SDTTTTT.</copyright>
    <lastBuildDate>Sun, 30 Aug 2020 20:41:54 +0800</lastBuildDate>
    
	<atom:link href="https://sdttttt.github.io/tags/data-structure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>B Tree</title>
      <link>https://sdttttt.github.io/blog/btree/</link>
      <pubDate>Sun, 30 Aug 2020 20:41:54 +0800</pubDate>
      
      <guid>https://sdttttt.github.io/blog/btree/</guid>
      <description>这篇文章以数据库存储的数据结构来引出本文的重点B树,以及后面还有另一种数据结构B+树.
试想, 如果你想持久化大量的数据在硬盘上, 同时还希望能高效的查询和修改他们, 你会怎么做, 使用哪种数据结构.
数组和链表, 他们的缺点很明显, 我们寻找数据需要遍历整个数据结构, 试想一下你的数据库中有50PB的数据, 这个开销是我们无法接受的.
哈希表, 通过给定的数据通过Hash函数生成对应的索引, 能非常高效的找到对应的数据. 但是, 哈希表不能用于范围查询.
二叉树, 一种使用二分法作为查询算法的数据结构, 在内存中, 二叉树的效率确实非常高, 但是如果是在硬盘上, 每次读取节点, 都需要进行一次IO, 随着数据量的增大, 深度逐渐加深, 二叉树的效率就会大大降低.
B Tree B树存在一些和二叉树不一样的地方: 二叉树每个节点只保存一份数据以及两个指针, B树在每个节点都可以保留一样数量的数据和指针, 指针的数量为数据的数量+1.
在B树中还有存在一个概念, 阶数, 它决定了该B树每个节点应该有多少数据以及指针.
Rules   排序方式：所有节点关键字是按递增次序排列，并遵循左小右大原则；例如一个节点能存放3份数据, 该数据需要从左到右增序存放, 1, 2, 3.
  子节点数：非叶节点的子节点数&amp;gt;1，且&amp;lt;=M ，且M&amp;gt;=2，空树除外(注：M阶代表一个树节点最多有多少个查找路径，M=M路,当M=2则是2叉树,M=3则是3叉)；
  关键字数：子节点的关键字数量大于等于ceil(m/2)-1个且小于等于M-1个(注：ceil()是个朝正无穷方向取整的函数 如ceil(1.1)结果为2);
  所有叶子节点均在同一层、叶子节点除了包含了关键字和关键字记录的指针外也有指向其子节点的指针只不过其指针地址都为null对应下图最后一层节点的空格子;
  Find 我们用一个图和一个实际的例子来理解B树(这里为了理解方便我就直接用实际字母的大小来排列C&amp;gt;B&amp;gt;A):
如上图我要从上图中找到E字母，查找流程如下:
  获取根节点的关键字进行比较，当前根节点关键字为M，E&amp;lt;M(26个字母顺序)，所以往找到指向左边的子节点(二分法规则，左小右大，左边放小于当前节点值的子节点、右边放大于当前节点值的子节点)；
  拿到关键字D和G，D&amp;lt;E&amp;lt;G 所以直接找到D和G中间的节点；
  拿到E和F，因为E=E 所以直接返回关键字和指针信息(如果树结构里面没有包含所要查找的节点则返回null).</description>
    </item>
    
    <item>
      <title>B Tree</title>
      <link>https://sdttttt.github.io/post/btree/</link>
      <pubDate>Sun, 30 Aug 2020 20:41:54 +0800</pubDate>
      
      <guid>https://sdttttt.github.io/post/btree/</guid>
      <description>这篇文章以数据库存储的数据结构来引出本文的重点B树,以及后面还有另一种数据结构B+树.
试想, 如果你想持久化大量的数据在硬盘上, 同时还希望能高效的查询和修改他们, 你会怎么做, 使用哪种数据结构.
数组和链表, 他们的缺点很明显, 我们寻找数据需要遍历整个数据结构, 试想一下你的数据库中有50PB的数据, 这个开销是我们无法接受的.
哈希表, 通过给定的数据通过Hash函数生成对应的索引, 能非常高效的找到对应的数据. 但是, 哈希表不能用于范围查询.
二叉树, 一种使用二分法作为查询算法的数据结构, 在内存中, 二叉树的效率确实非常高, 但是如果是在硬盘上, 每次读取节点, 都需要进行一次IO, 随着数据量的增大, 深度逐渐加深, 二叉树的效率就会大大降低.
B Tree B树存在一些和二叉树不一样的地方: 二叉树每个节点只保存一份数据以及两个指针, B树在每个节点都可以保留一样数量的数据和指针, 指针的数量为数据的数量+1.
在B树中还有存在一个概念, 阶数, 它决定了该B树每个节点应该有多少数据以及指针.
Rules   排序方式：所有节点关键字是按递增次序排列，并遵循左小右大原则；例如一个节点能存放3份数据, 该数据需要从左到右增序存放, 1, 2, 3.
  子节点数：非叶节点的子节点数&amp;gt;1，且&amp;lt;=M ，且M&amp;gt;=2，空树除外(注：M阶代表一个树节点最多有多少个查找路径，M=M路,当M=2则是2叉树,M=3则是3叉)；
  关键字数：子节点的关键字数量大于等于ceil(m/2)-1个且小于等于M-1个(注：ceil()是个朝正无穷方向取整的函数 如ceil(1.1)结果为2);
  所有叶子节点均在同一层、叶子节点除了包含了关键字和关键字记录的指针外也有指向其子节点的指针只不过其指针地址都为null对应下图最后一层节点的空格子;
  Find 我们用一个图和一个实际的例子来理解B树(这里为了理解方便我就直接用实际字母的大小来排列C&amp;gt;B&amp;gt;A):
如上图我要从上图中找到E字母，查找流程如下:
  获取根节点的关键字进行比较，当前根节点关键字为M，E&amp;lt;M(26个字母顺序)，所以往找到指向左边的子节点(二分法规则，左小右大，左边放小于当前节点值的子节点、右边放大于当前节点值的子节点)；
  拿到关键字D和G，D&amp;lt;E&amp;lt;G 所以直接找到D和G中间的节点；
  拿到E和F，因为E=E 所以直接返回关键字和指针信息(如果树结构里面没有包含所要查找的节点则返回null).</description>
    </item>
    
    <item>
      <title>Red Black Tree</title>
      <link>https://sdttttt.github.io/blog/red-black-tree/</link>
      <pubDate>Mon, 25 May 2020 19:27:28 +0800</pubDate>
      
      <guid>https://sdttttt.github.io/blog/red-black-tree/</guid>
      <description>半年前在研究HashMap的时候已经学习过红黑树的规则原理了. 不过现在又遇到就忘记是怎么实现的了.(只知道这玩意是用来平衡树的) 这次就把这个数据结构做一个了断.
性质  性质1：每个节点要么是黑色，要么是红色。 性质2：根节点是黑色。 性质3：每个叶子节点（NIL）是黑色。 性质4：每个红色结点的两个子结点一定都是黑色。 性质5：任意一结点到每个叶子结点的路径都包含数量相同的黑结点。  满足这5个性质就能保证红黑树是平衡的.
Insert 插入的节点默认是红色的.因为这样可以最大限度满足红黑树的5个性质.
请试想一下.如果插入的节点是红色:
 性质1可以满足. 性质2可以满足. 性质3可以满足(插入红色节点后自动衍生出2个黑色的NIL节点). 性质4可能没法满足(新插入的节点的父节点也是红色). 性质5可能没法满足(父节点是黑色时就不行).  然后是红黑树节点的左右旋.
看懂没? 节点的旋转大概就是这样。
然后就是要分插入的情况了.
  第一种：根节点为空。这种情况，将node的颜色改为黑色即可.
  第二种: node的父节点为黑色。这种情况不需要做修改.
  第三种: node的父节点为红色 (根据性质3，N的祖父节点必为黑色). 这种情况和变换规则都比较多.下面细说&amp;hellip;
 node的叔父节点为红色。这种情况，将N的父节点和叔父节点的颜色都改为黑色，若祖父节点是跟节点就将其改为黑色，否则将其颜色改为红色，并以祖父节点为插入的目标节点开始重新递归修复红黑树.   node的叔父节点为黑色，且node和node的父节点在同一边 (即父节点为祖父的左儿子时，N也是父节点的左儿子。父节点为祖父节点的右儿子时。N也是父节点的右儿子)。以父节点为祖父节的左儿子为例，将父节点改为黑色，祖父节点改为红色，然后以祖父节点为基准右旋。(N为父节点右儿子时做相应的左旋)   node的叔父节点为黑色，且node和node的父节点不在同一边 (即父节点为祖父的左儿子时，N是父节点的右儿子。父节点为祖父节点的右儿子时。N也是父节点左右儿子)。以父节点为祖父节点的左儿子为例。以父节点为基准，进行左旋，然后以父节点为目标插入节点进入情况3的b情况进行操作。    Delete 这个以后再说.
Search 红黑树算是搜索二叉树的一个子集，Search方法是相同的。</description>
    </item>
    
    <item>
      <title>Red Black Tree</title>
      <link>https://sdttttt.github.io/post/red-black-tree/</link>
      <pubDate>Mon, 25 May 2020 19:27:28 +0800</pubDate>
      
      <guid>https://sdttttt.github.io/post/red-black-tree/</guid>
      <description>半年前在研究HashMap的时候已经学习过红黑树的规则原理了. 不过现在又遇到就忘记是怎么实现的了.(只知道这玩意是用来平衡树的) 这次就把这个数据结构做一个了断.
性质  性质1：每个节点要么是黑色，要么是红色。 性质2：根节点是黑色。 性质3：每个叶子节点（NIL）是黑色。 性质4：每个红色结点的两个子结点一定都是黑色。 性质5：任意一结点到每个叶子结点的路径都包含数量相同的黑结点。  满足这5个性质就能保证红黑树是平衡的.
Insert 插入的节点默认是红色的.因为这样可以最大限度满足红黑树的5个性质.
请试想一下.如果插入的节点是红色:
 性质1可以满足. 性质2可以满足. 性质3可以满足(插入红色节点后自动衍生出2个黑色的NIL节点). 性质4可能没法满足(新插入的节点的父节点也是红色). 性质5可能没法满足(父节点是黑色时就不行).  然后是红黑树节点的左右旋.
看懂没? 节点的旋转大概就是这样。
然后就是要分插入的情况了.
  第一种：根节点为空。这种情况，将node的颜色改为黑色即可.
  第二种: node的父节点为黑色。这种情况不需要做修改.
  第三种: node的父节点为红色 (根据性质3，N的祖父节点必为黑色). 这种情况和变换规则都比较多.下面细说&amp;hellip;
 node的叔父节点为红色。这种情况，将N的父节点和叔父节点的颜色都改为黑色，若祖父节点是跟节点就将其改为黑色，否则将其颜色改为红色，并以祖父节点为插入的目标节点开始重新递归修复红黑树.   node的叔父节点为黑色，且node和node的父节点在同一边 (即父节点为祖父的左儿子时，N也是父节点的左儿子。父节点为祖父节点的右儿子时。N也是父节点的右儿子)。以父节点为祖父节的左儿子为例，将父节点改为黑色，祖父节点改为红色，然后以祖父节点为基准右旋。(N为父节点右儿子时做相应的左旋)   node的叔父节点为黑色，且node和node的父节点不在同一边 (即父节点为祖父的左儿子时，N是父节点的右儿子。父节点为祖父节点的右儿子时。N也是父节点左右儿子)。以父节点为祖父节点的左儿子为例。以父节点为基准，进行左旋，然后以父节点为目标插入节点进入情况3的b情况进行操作。    Delete 这个以后再说.
Search 红黑树算是搜索二叉树的一个子集，Search方法是相同的。</description>
    </item>
    
    <item>
      <title>Tree by Rust implement</title>
      <link>https://sdttttt.github.io/blog/tree_rust/</link>
      <pubDate>Wed, 20 May 2020 19:14:33 +0800</pubDate>
      
      <guid>https://sdttttt.github.io/blog/tree_rust/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tree by Rust implement</title>
      <link>https://sdttttt.github.io/post/tree_rust/</link>
      <pubDate>Wed, 20 May 2020 19:14:33 +0800</pubDate>
      
      <guid>https://sdttttt.github.io/post/tree_rust/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Stack by Rust implement</title>
      <link>https://sdttttt.github.io/blog/stack_rust/</link>
      <pubDate>Wed, 20 May 2020 19:01:23 +0800</pubDate>
      
      <guid>https://sdttttt.github.io/blog/stack_rust/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Stack by Rust implement</title>
      <link>https://sdttttt.github.io/post/stack_rust/</link>
      <pubDate>Wed, 20 May 2020 19:01:23 +0800</pubDate>
      
      <guid>https://sdttttt.github.io/post/stack_rust/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>