<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>log on SDTTTTT&#39;s Smelly fish Rotten shrimp 📓</title>
    <link>https://sdttttt.github.io/blog/log/</link>
    <description>Recent content in log on SDTTTTT&#39;s Smelly fish Rotten shrimp 📓</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright © 2020, SDTTTTT.</copyright>
    <lastBuildDate>Tue, 22 Sep 2020 12:08:44 +0800</lastBuildDate>
    
	<atom:link href="https://sdttttt.github.io/blog/log/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>sraft (二)</title>
      <link>https://sdttttt.github.io/sraft-%E4%BA%8C/</link>
      <pubDate>Tue, 22 Sep 2020 12:08:44 +0800</pubDate>
      
      <guid>https://sdttttt.github.io/sraft-%E4%BA%8C/</guid>
      <description>昨天草草的完成了通信协议适配器, 至少能做到自由切换协议, 纵看整个编程模型还是有缺陷, StateMachine的内部结构比我想的要复杂的多, 多个状态实现的切换,以及对一些内部事件的触发. StateMachine模块的密度和其他模块完全不同. 反而RaftKernel存在的意义却减小了.
经过昨天晚上和今早的考虑, 我决定将StateMachine作为一个Slot,接入到RaftKernel中去, RaftKernel现在同时也是状态机本身, Slot是可变的, 可以有Leader, Follower, Candidate三种插槽,每个Slot都有不同的扩展字段, 比如Leader会需要登记每个Node的同步日志的深度以及状态. 并且每个Slot都有自己的事件处理实现.
没想到第一天开发结束就会遇到麻烦, 看来sraft以后的苦难还不少&amp;hellip;</description>
    </item>
    
    <item>
      <title>Sraft (一)</title>
      <link>https://sdttttt.github.io/sraft-%E4%B8%80/</link>
      <pubDate>Mon, 21 Sep 2020 11:29:51 +0800</pubDate>
      
      <guid>https://sdttttt.github.io/sraft-%E4%B8%80/</guid>
      <description>今天开始算是正式编写Sraft这个库, 开发的原因有两个:
 我需要通过这次开发来熟悉Raft这个协议.(以后面试或者和人攀谈也更有底气) 我的微服务框架的服务中心需要一个能达成分布式一致性的功能.  语言采用的是Go, 目前的编程模型大概也完成了, 下面我来介绍:
 本人喜欢简单并且高效的设计, 对于设计复杂难以实现的东西会感到不适(脑子不够用),
 Raft Kernel 整个编程模型会有比较多的模块, 整体采用的是微核架构, Raft Kernel会协调各个模块之间的工作.
模块之间的通信由Raft Kernel来完成. 通信方式采用Channel异步非阻塞的形式.
Exchange Network 外部通信从这里进入, 由Exchange Network将通信内容封装为事件, 发送给Raft Kernel.
或者Raft Kernel传递事件给Exchange Network, 再由Exchange Network执行外部通信.
State Machine Raft协议的核心实现, 状态机会在Leader, Follower, Candidate三种角色之间自动切换, 每一角色处理的事件都是一样的, 但是具体过程是不一样的. (这个部分的密度会比较大)
Data Log Synchronizer 负责同步数据的模块, 采用的是日志提交形式.
 以上的我目前已经构思出的编程模型, 但是为暂定. 实际的编写模型肯定会有少许修改.
PROJECT: github.com/sdttttt/sraft</description>
    </item>
    
    <item>
      <title>About Gcr</title>
      <link>https://sdttttt.github.io/about-gcr/</link>
      <pubDate>Sun, 20 Sep 2020 13:20:06 +0800</pubDate>
      
      <guid>https://sdttttt.github.io/about-gcr/</guid>
      <description>十多天前, 我创建了GCR这个项目, 原因比较纯粹, 我是个命令行工具爱好者, 我认为命令行能带来更好的工作效率以及收益, 我平时编码, 也是遵守Git提交规范的, 使用Node.js平台上的git-cz工具来格式化我的提交信息, 不过由于它属于Node.js这个平台, 不可避免, 你需要安装Node.js的runtime环境.
我想要一种更加方面快速的工具, 所以我建立了GCR这个项目, 它是使用Rust编写的, 不需要安装任何环境, 比起Node, 它会更快, 而且保留了跨平台的特性. 在GCR中我还会加入一些比较个性化的元素. GCR看起来可能会是一个更好用的Git?.
这个项目可能还需要几个星期的时间, 请期待吧.</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://sdttttt.github.io/faq/</link>
      <pubDate>Sat, 19 Sep 2020 20:15:53 +0800</pubDate>
      
      <guid>https://sdttttt.github.io/faq/</guid>
      <description>以前一些小白经常问我的问题.
Q: 我想自己建立一个网站, 我应该使用什么技术?
A: Ruby on Rails.
 ROR是一款老牌的WEBMVC框架, 到现在有10多年的历史了. 在中国, ROR使用的并不多, 这并不能说明它不优秀, ROR拥有非常多的功能模块, 几乎没有ROR做不到的. 论开发效率,ROR绝对能满足你, Ruby这个语言, 如果你有去学过, 会发现他的语法非常的随意. 自己造一个语法Ruby都能支持, 我认为, Ruby是在所有语言中开发体验最好的语言. 良好的开发体验加上优秀的开发效率, ROR是值得你去使用的.
 Q: 我想写一点小工具, 我应该用什么语言?
A: Python.</description>
    </item>
    
    <item>
      <title>日志(一)</title>
      <link>https://sdttttt.github.io/%E6%97%A5%E5%BF%97%E4%B8%80/</link>
      <pubDate>Sat, 19 Sep 2020 11:06:17 +0800</pubDate>
      
      <guid>https://sdttttt.github.io/%E6%97%A5%E5%BF%97%E4%B8%80/</guid>
      <description>目前还是个5月份刚毕业的应届生, 今年还是撞到了疫情这个时间口上, 工作真是相当的难找, 6月到7月的样子, 我去尝试去考驾照, 目前还在科目二这边卡着, 中间有空也是各种找单位去面试.
比较幸运, 我在8月初的时候收到了来自安恒信息的面试通知, 他们是一家上市公司, 规模也不小, 我也是被别人内推才有这个面试资格的, 面试一共三轮, 前两轮技术面试, 最后一轮综合面试, 第一轮技术面试大概就是问了我一些JVM原理, 以及编码思路, 还有一些我比较擅长的分布式存储的问题. 第一轮过的呢也还算惊险. 第二轮是在几天后, 问的内容基本上是一些JDK源码, 数据结构, 还有一些框架问题.我回答的还算是流畅, 也算是过了.可惜,最后一轮面试之前,因为安恒不招收985,211以外的应届生, 所以我被淘汰了.
后面每天在晚上投简历, 大概在一个月后, 又有新的面试来了, 一家叫做郦鸣科技的公司, 面试官问的都是一些业务处理逻辑, 身为应届生的我也是吃了亏, 因为我根本没有实际的工作经验. 不过我还是以试用生的身份进去了.
新人入职第一天就是先把公司项目的代码过一边, 看了他们公司的代码之后, 说实话, 我非常失望, 复杂的对象关系结构, 长冗的控制器函数, 以及空空如也的test文件夹, 我不知道他们的项目能维护多长时间, 可能是我的想法太极端了, 大学时的我就开始受到马丁福勒的软件设计思想的影响, 对维护性差的代码变得敏感起来. 我边读他们的代码, 边重构着. 就这样过了一个星期.
在这周里, 我还收到了来自电信和一家电子交易公司的面试通知, 我很高兴, 因为我对现在的工作并不感到满足, 在周五, 我请了假, 去面试, 电信这边很顺利, 面试官和我说, 他喜欢我的开源项目, 并且对我的CICD技术感兴趣, 而且他也不关心我的学历, 我真的很高兴.不过在录用之前,面试官说得先和上级汇报, 因为录不录用不是他能决定的.
下午, 我去了那家电子交易公司面试, 不过应届生在他们公司面试之前得先做试卷, 内容是关于Java的, 我有点吃惊, 不过我也发现了, 对于一些java代码的运行细节我还了解的不够清楚, 在这里又发现了自己的缺点, 我感到很满足. 试卷完成后, 就是面谈了, 面试官看起来接近30岁, 他先问了我的开源项目的问题, 接着是一些Java基础的问题, 最后又考了考我的业务能力, 他出了一个秒杀题, 我回答的并不算好, 应该只答对了一半.</description>
    </item>
    
  </channel>
</rss>