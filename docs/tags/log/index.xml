<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>log on SDTTTTT's Log</title><link>https://sdttttt.github.io/tags/log/</link><description>Recent content in log on SDTTTTT's Log</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2020, SDTTTTT.</copyright><lastBuildDate>Tue, 16 Mar 2021 16:52:51 +0800</lastBuildDate><atom:link href="https://sdttttt.github.io/tags/log/index.xml" rel="self" type="application/rss+xml"/><item><title>Log 16</title><link>https://sdttttt.github.io/blog/log-16/</link><pubDate>Tue, 16 Mar 2021 16:52:51 +0800</pubDate><guid>https://sdttttt.github.io/blog/log-16/</guid><description>给Blog换个一个配色, 之前的配色太原生HTML, 丑的我都有点看不下去了&amp;hellip;
新的主题是themes.gohugo.io上随便挑的, 看顺眼就用上了. 讲的就是眼缘.Emm..
其实我还是比较喜欢纯色的主题. 有MACOS感觉的那种emm..</description></item><item><title>Log 14</title><link>https://sdttttt.github.io/blog/log-14/</link><pubDate>Tue, 02 Mar 2021 10:36:48 +0800</pubDate><guid>https://sdttttt.github.io/blog/log-14/</guid><description>最近不想让服务器多余的资源吃灰, 就在服务器上做了种, 提供一些下载资源的速度. 不过带宽确实是太小了, 这个玩意总共就1m带宽, 如果边做种我再边用RSS的话, 这个速度我都怀疑这玩意是不是done了?
所以平时白天做种的速度只能限制再100KB/s以下, 不如RSS的速度真的太感人. 晚上的话, 龟速模式就会解除, 做种速度能提升大概3-4倍的样子.
如果有机会还是想白嫖带宽大一点的服务器锕.</description></item><item><title>RSS 好耶!</title><link>https://sdttttt.github.io/blog/new-rss/</link><pubDate>Sat, 20 Feb 2021 11:13:45 +0800</pubDate><guid>https://sdttttt.github.io/blog/new-rss/</guid><description>最近迷上了RSS这种获取信息的方式, 平时访问多个网站来获取信息的方式实属低效率, 而且太碎了, 俺这种老年人就经常忘记.
RSS: 简易信息聚合（也叫聚合内容）是一种基于XML标准，在互联网上被广泛采用的内容包装和投递协议。RSS(Really Simple Syndication)是一种描述和同步网站内容的格式，是使用最广泛的XML应用。RSS搭建了信息迅速传播的一个技术平台，使得每个人都成为潜在的信息提供者。发布一个RSS文件后，这个RSS Feed中包含的信息就能直接被其他站点调用，而且由于这些数据都是标准的XML格式，所以也能在其他的终端和服务中使用，是一种描述和同步网站内容的格式。
目前使用RSS有一个很阴霸的东西, 叫做RSSHub, 这个玩意能很好解决你找RSS订阅的麻烦.
RSSHub 是一个开源、简单易用、易于扩展的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源。RSSHub 借助于开源社区的力量快速发展中，目前已适配数百家网站的上千项内容.
不过这玩意是一个服务器软件, 需要单独部署的. 官方提供的demo有很大一部分的RSS Feed都是无效的. 这两天正好自建了一个RSSHub, 在这里.
如果有需要可以使用这个地址来代替官方提供的demo. 至少一年内都不会失效🐶
小声BB: 实际上我的blog也是有rss的, 你能找到么?</description></item><item><title>Log 13</title><link>https://sdttttt.github.io/blog/log-13/</link><pubDate>Mon, 21 Dec 2020 09:05:08 +0800</pubDate><guid>https://sdttttt.github.io/blog/log-13/</guid><description>粗且谈一下关于新的主机的想法.
i5 10400F 这块U不带核显, 这倒是无所谓, 是i5里目前第一块6core12thread的U. 性能接近i7 8700. CPU实际上无所谓.
24G RAM 24G也是我想过之后才选择的内存大小, 32嫌大, 16嫌小, 只能这样了.
W240 散热是一个W240的水冷, 只有一个风扇. 虽然是W240, 但感觉很可能是个丐中丐.
ASUS B460-K 丐中丐主板, 用i5 10400F这U还是没有问题的. 这主板设计也有问题. SATA接口在显卡散热口的下面就离谱.
NVME M.2 250G 固态硬盘, 就这样吧, 速度倒是无所谓, 容量小了点, 导致我后面又追加了一个1T的PMR.
ASUS TUF RX5600XT 6G EVO-GAMING 嘶&amp;hellip;这显卡就比较尴尬了. 先说参数. 频率比公版高一点. TUF是个丐版, 三风扇, 其他没有问题的. 性能基本上和2060并肩,甚至更高.能超到2060S的水平. 这玩意为什么尴尬呢, 因为这块卡稍微加一两百就能到5700, 屁股后面又是RX590. 说这玩意是智商检测卡也没什么问题. 最后这块卡打全境2 全高 2560*1080居然不能稳定60FPS??? 太蒂蒂了
周末基本上就是打游戏了. 还有追加了个硬盘. 硬盘的SATA线穿过显卡风扇. 看起来十分诡异. 这个SATA接口就不能长外面么???</description></item><item><title>Log 12</title><link>https://sdttttt.github.io/blog/log-12/</link><pubDate>Fri, 18 Dec 2020 12:22:28 +0800</pubDate><guid>https://sdttttt.github.io/blog/log-12/</guid><description>这两天有个接口测试的前端项目终于开始动土了，我还是一如既往的写前端呢。谁让我TM是高贵的全栈工程师（狗头
新的台式主机也到了， 配置撑个2年不是什么大问题。 双休日总算可以畅爽的打游戏了， 还有希望明天的硬盘和音响能快点到。打游戏没有声音可是大忌锕。</description></item><item><title>Log 11</title><link>https://sdttttt.github.io/blog/log-11/</link><pubDate>Tue, 01 Dec 2020 10:04:34 +0800</pubDate><guid>https://sdttttt.github.io/blog/log-11/</guid><description>昨天发布了GRC的0.9.2版本, 这个版本更新说实话比较水. 追加的功能有参数指定配置文件.还有一些小问题的修复, 就没了emm
下次GRC追加功能应该会在v1.0.0, 终于要到正式版本了. 如果有人有更好的想法得和我说啊啊啊!!~~ 我都想不好加什么功能比较好.</description></item><item><title>Log 10</title><link>https://sdttttt.github.io/blog/log-10/</link><pubDate>Wed, 25 Nov 2020 11:25:47 +0800</pubDate><guid>https://sdttttt.github.io/blog/log-10/</guid><description>昨天一大早就跑去余杭, 去新园区面试. 真的挺麻烦的. 希望这种事越少越好.
害得我昨天都没有commit.</description></item><item><title>GRC 5</title><link>https://sdttttt.github.io/blog/grc-5/</link><pubDate>Tue, 17 Nov 2020 15:08:13 +0800</pubDate><guid>https://sdttttt.github.io/blog/grc-5/</guid><description>很有趣, 上个星期有人在GRC中和我提了一个问题, GIT很多操作是要使用环境变量来控制.
我平时根本不使用环境变量来控制GIT, 这个特性可能会在以后支持吧.</description></item><item><title>GRC 4</title><link>https://sdttttt.github.io/blog/grc-4/</link><pubDate>Thu, 12 Nov 2020 14:07:47 +0800</pubDate><guid>https://sdttttt.github.io/blog/grc-4/</guid><description>啊哈, 我的新键盘已经到了, 这周周末(11.13-11.15)我会尽快修复目前GRC中的一些问题:
#25 Did not check type. #28 [Feature request] Create a template gcr.toml when the install is made with cargo #30 env GIT_AUTHOR_NAME is not used 希望有更多人使用GRC.</description></item><item><title>Redis Compile</title><link>https://sdttttt.github.io/blog/redis-compile/</link><pubDate>Wed, 11 Nov 2020 16:43:06 +0800</pubDate><guid>https://sdttttt.github.io/blog/redis-compile/</guid><description>也不知道我发了什么疯, 在windows上编译了一遍redis. 事实上我找到的windows上最新的redis版本是3.
这个版本以及相当老了. 目前最新的redis是在6. 我不想功能相差过大,就重新在windows上编译了一次.
中间捣鼓了很久. 由于redis是在unix环境上开发的, windows上编译还是很麻烦. 首先试了cygwin这个unix模拟环境可惜编译失败了. 后面我下载了msys2这个unix的工具套件. 这次很顺利. redis6的包我就放在这里, 需要可以下载.</description></item><item><title>Log 9</title><link>https://sdttttt.github.io/blog/log-9/</link><pubDate>Wed, 11 Nov 2020 14:04:54 +0800</pubDate><guid>https://sdttttt.github.io/blog/log-9/</guid><description>上周周五学习了一个新的玩意，一个自动化测试类库（Selenium），作用也比较简单，在浏览器的网页上模拟鼠标和键盘输入操作。是个没啥难度也没啥营养的东西。就像换了个语言写Javascript一样。
出乎意料的是这周的开头居然有歪果仁在我的GRC上提出了一些问题，我还以为这个项目会孤独终老，看起来还是有人在使用的。正好，趁着11.11换了个显示屏和键盘，等发工资就再买个PC主机，我就趁这段时间把目前GRC存在的问题解决了。
最近也打算学习一下操作系统的知识，希望这个月顺利。</description></item><item><title>GRC 3</title><link>https://sdttttt.github.io/blog/grc-3/</link><pubDate>Tue, 03 Nov 2020 14:28:39 +0800</pubDate><guid>https://sdttttt.github.io/blog/grc-3/</guid><description>上周末算是把GRC扩展的部分开发完成了， 最开始写的时候没有遇到什么特别大的困难， 不禁感叹，我写Rust越来越顺手了已经.
结果到星期六准备把几个模块接起来的时候， 发现出现了变量生命周期的问题，我还特地去找人问， 但根本没啥人鸟我。没办法，最后算是有意无意之间发现了解决的方法&amp;hellip;
最后在星期六晚上总算是编写完成了已经，星期天的时候发布了。 可惜这几天的下载量都愁云惨淡&amp;hellip;</description></item><item><title>Log 8</title><link>https://sdttttt.github.io/blog/log-8/</link><pubDate>Thu, 29 Oct 2020 09:04:14 +0800</pubDate><guid>https://sdttttt.github.io/blog/log-8/</guid><description>每天上班, 先骑15分钟自行车到地铁再做20多分钟地铁, 针不戳.
感觉体能下降的厉害.
今天在博客仓库了增加了hugo模块。 以后看起来跟换主题会方便很多。 但是为啥有go.mod文件。这又不是一个go项目&amp;hellip;</description></item><item><title>Log 7</title><link>https://sdttttt.github.io/blog/log-7/</link><pubDate>Wed, 28 Oct 2020 09:54:22 +0800</pubDate><guid>https://sdttttt.github.io/blog/log-7/</guid><description>尝试优化一下文章创建的脚本.</description></item><item><title>Log 6</title><link>https://sdttttt.github.io/blog/log-6/</link><pubDate>Tue, 27 Oct 2020 17:24:55 +0800</pubDate><guid>https://sdttttt.github.io/blog/log-6/</guid><description>最近仔细反思了一下, 还是去研究一些什么东西. sraft已经写的我头都大了. 我打算最近一段时间不再在Github上编写代码了.
一方面是没有什么东西打得起我的兴趣, 另一方面还是觉得自己没有真正擅长的方面, 研究分布式系统这么长时间, 进展真的很慢, 一是我平时很懒, 不喜欢搭复杂的环境, 二是单纯的分布式方面的知识没有什么软用. 需要结合其他方面.
潜了潜了. (当然博客还是会写www)</description></item><item><title>Log 5</title><link>https://sdttttt.github.io/blog/log-5/</link><pubDate>Fri, 23 Oct 2020 16:44:07 +0800</pubDate><guid>https://sdttttt.github.io/blog/log-5/</guid><description>今天写了一天的sraft. 本来是自信满满，但是有些地方的设计真的让我焦头烂额.
今天把sraft的rpc的网络通信部分换成了长连接。 但是写到节点发现的部分又有问题来了，我没有写关于处理节点发现之类的模块， 至今都是按照raft论文上的基础理论来实现的。
这一块又要怎么设计呢&amp;hellip; 果然有些地方写的还是太复杂了么.</description></item><item><title>Log 4</title><link>https://sdttttt.github.io/blog/log-4/</link><pubDate>Thu, 22 Oct 2020 09:26:05 +0800</pubDate><guid>https://sdttttt.github.io/blog/log-4/</guid><description>昨天算是完成了第一个前端上需求.来讲讲成果吧. (其实根本无关紧要)
看了SVN记录,整个项目第一次提交是在2018年. (立项的时间感觉肯定更早)
整体技术使用的基本时原生JS(没有ES6) + Jquery. 项目代码风格凌乱. 肯定有好几个人接手过了.
每个页面还不是HTML&amp;hellip;是nm的JSP.(所以我才觉得应该不是2018年立项的) 所以整个项目都是在Tomcat上运行的.正常来说都是写成HTML然后跑在Nginx上.
这次的需求就是在原来的页面上加一个新的按钮并且完善整个页面. 我看来那个页面的其他标签.用的基本是绝对定位布局..惊了
这次我基本把原生JS完全复习了一遍. 我不太喜欢使用Jquery.因为感觉语法很奇怪, 可读性很差.
还学到了一个新的库(GoJS)用来画图的.这个库入门很简单,但是要高度自定义使用还是有些困难的.
唉, 我到底啥时候才能写后端嘞.</description></item><item><title>Log 3</title><link>https://sdttttt.github.io/blog/log-3/</link><pubDate>Wed, 21 Oct 2020 08:55:36 +0800</pubDate><guid>https://sdttttt.github.io/blog/log-3/</guid><description>细心的人可能注意到我这几天都在写JS, 因为这边的公司人手其实缺乏很严重, 很多都是做后端的, 而且后端并不是全部Java, 有相当部分是Python写的.
我在大学期间为了选择以后的WEB方向, 一狠心把当时比较前沿的WEB技术全部学了一遍, 包括前端的一些框架, 最后选择了WEB后端, 语言为Go, 或者Java. 也算半个全栈吧.
这个公司正好是发挥了我所有的技能..不过这边的JS大部分都是原生的, 我比较习惯用ES6的写法.</description></item><item><title>日志</title><link>https://sdttttt.github.io/blog/log-2/</link><pubDate>Sun, 11 Oct 2020 14:45:23 +0800</pubDate><guid>https://sdttttt.github.io/blog/log-2/</guid><description>昨天骑自行车下班回来后荨麻疹又犯了, 实在是比较难受, 今天算是去了趟皮肤病医院.
算是配了点药. 希望能好一点.</description></item><item><title>Sraft (三)</title><link>https://sdttttt.github.io/blog/sraft-3/</link><pubDate>Fri, 09 Oct 2020 10:52:24 +0800</pubDate><guid>https://sdttttt.github.io/blog/sraft-3/</guid><description>经过几天思考, 我决定稍微重新分配一下各个模块的密度.
RaftKernel中的Solt为本次的重点.对RaftKernel来说Solt为一个黑盒.Solt对外处理所有事件,但是不暴露实现. 内部的状态机转化也对RaftKernel进行隐藏.RaftKernel只要接受外界AE, 交给Solt, Solt反馈相应的事件, RaftKernel进行处理.
挖藕, 希望这次有效.</description></item><item><title>Essays</title><link>https://sdttttt.github.io/blog/essays/</link><pubDate>Tue, 06 Oct 2020 12:34:31 +0800</pubDate><guid>https://sdttttt.github.io/blog/essays/</guid><description>前几天去朋友那边玩了一趟, 事实上并没有什么好玩的. 这几天什么也没做. sraft也没有什么进展.
我又重新对Ruby on Rails 感兴趣了.但是没有一个很好的环境写这个东西.还是算了.
还是想想下一个项目写什么比较好.</description></item><item><title>GRC (二)</title><link>https://sdttttt.github.io/blog/grc-2/</link><pubDate>Thu, 01 Oct 2020 15:24:27 +0800</pubDate><guid>https://sdttttt.github.io/blog/grc-2/</guid><description>昨天姑且算是完成了GRC的开发. push这个命令不是很想加,想了一下也没有必要.
GRC的0.8.0版本昨天算是发布了, 应该也算是头一次正经的用Rust来开发软件.
在crate.io上看起来有100的安装了. 不知道他们脸上是什么表情 wwww
希望GRC能给他们带去方便吧.
当然, GRC的终点还没到. 我会一直使用这个工具. 碰到BUG或者有新想法肯定会去更新.况且现在连1.0.0版本都还没到.
接下来主要工作会专注到学习加密算法,和sraft的开发上.
&amp;hellip;sraft一直都没有什么好的想法啊&amp;hellip;</description></item><item><title>GRC (一)</title><link>https://sdttttt.github.io/blog/grc-1/</link><pubDate>Sat, 26 Sep 2020 14:49:17 +0800</pubDate><guid>https://sdttttt.github.io/blog/grc-1/</guid><description>ooo! 一个不错的消息.
目前GRC的commit规范的功能已经完全实现了. 之前还说要几个星期, 看来比我想得要快很多 👴勤勉 基本上已经和git-cz有着完全一致的功能. 我也已经把GRC发布在了crates.io网站上. 在crates.io上搜索grc就能看到. 同时我也在v2ex上写了关于GRC的文章.
开发也会继续进行, GRC会在以后为你提供更方便的功能. 我也期待有人能参与到这个项目中来.
希望GRC能帮助更多人.</description></item><item><title>sraft (二)</title><link>https://sdttttt.github.io/blog/sraft-2/</link><pubDate>Tue, 22 Sep 2020 12:08:44 +0800</pubDate><guid>https://sdttttt.github.io/blog/sraft-2/</guid><description>昨天草草的完成了通信协议适配器, 至少能做到自由切换协议, 纵看整个编程模型还是有缺陷, StateMachine的内部结构比我想的要复杂的多, 多个状态实现的切换,以及对一些内部事件的触发. StateMachine模块的密度和其他模块完全不同. 反而RaftKernel存在的意义却减小了.
经过昨天晚上和今早的考虑, 我决定将StateMachine作为一个Slot,接入到RaftKernel中去, RaftKernel现在同时也是状态机本身, Slot是可变的, 可以有Leader, Follower, Candidate三种插槽,每个Slot都有不同的扩展字段, 比如Leader会需要登记每个Node的同步日志的深度以及状态. 并且每个Slot都有自己的事件处理实现.
没想到第一天开发结束就会遇到麻烦, 看来sraft以后的苦难还不少&amp;hellip;</description></item><item><title>Sraft (一)</title><link>https://sdttttt.github.io/blog/sraft-1/</link><pubDate>Mon, 21 Sep 2020 11:29:51 +0800</pubDate><guid>https://sdttttt.github.io/blog/sraft-1/</guid><description>今天开始算是正式编写Sraft这个库, 开发的原因有两个:
我需要通过这次开发来熟悉Raft这个协议.(以后面试或者和人攀谈也更有底气) 我的微服务框架的服务中心需要一个能达成分布式一致性的功能. 语言采用的是Go, 目前的编程模型大概也完成了, 下面我来介绍:
本人喜欢简单并且高效的设计, 对于设计复杂难以实现的东西会感到不适(脑子不够用),
Raft Kernel 整个编程模型会有比较多的模块, 整体采用的是微核架构, Raft Kernel会协调各个模块之间的工作.
模块之间的通信由Raft Kernel来完成. 通信方式采用Channel异步非阻塞的形式.
Exchange Network 外部通信从这里进入, 由Exchange Network将通信内容封装为事件, 发送给Raft Kernel.
或者Raft Kernel传递事件给Exchange Network, 再由Exchange Network执行外部通信.
State Machine Raft协议的核心实现, 状态机会在Leader, Follower, Candidate三种角色之间自动切换, 每一角色处理的事件都是一样的, 但是具体过程是不一样的. (这个部分的密度会比较大)
Data Log Synchronizer 负责同步数据的模块, 采用的是日志提交形式.
以上的我目前已经构思出的编程模型, 但是为暂定. 实际的编写模型肯定会有少许修改.
PROJECT: github.com/sdttttt/sraft</description></item><item><title>About Gcr</title><link>https://sdttttt.github.io/blog/about-gcr/</link><pubDate>Sun, 20 Sep 2020 13:20:06 +0800</pubDate><guid>https://sdttttt.github.io/blog/about-gcr/</guid><description>十多天前, 我创建了GCR这个项目, 原因比较纯粹, 我是个命令行工具爱好者, 我认为命令行能带来更好的工作效率以及收益, 我平时编码, 也是遵守Git提交规范的, 使用Node.js平台上的git-cz工具来格式化我的提交信息, 不过由于它属于Node.js这个平台, 不可避免, 你需要安装Node.js的runtime环境.
我想要一种更加方面快速的工具, 所以我建立了GCR这个项目, 它是使用Rust编写的, 不需要安装任何环境, 比起Node, 它会更快, 而且保留了跨平台的特性. 在GCR中我还会加入一些比较个性化的元素. GCR看起来可能会是一个更好用的Git?.
这个项目可能还需要几个星期的时间, 请期待吧.</description></item><item><title>FAQ</title><link>https://sdttttt.github.io/blog/faq/</link><pubDate>Sat, 19 Sep 2020 20:15:53 +0800</pubDate><guid>https://sdttttt.github.io/blog/faq/</guid><description>以前一些小白经常问我的问题.
Q: 我想自己建立一个网站, 我应该使用什么技术?
A: Ruby on Rails.
ROR是一款老牌的WEBMVC框架, 到现在有10多年的历史了. 在中国, ROR使用的并不多, 这并不能说明它不优秀, ROR拥有非常多的功能模块, 几乎没有ROR做不到的. 论开发效率,ROR绝对能满足你, Ruby这个语言, 如果你有去学过, 会发现他的语法非常的随意. 自己造一个语法Ruby都能支持, 我认为, Ruby是在所有语言中开发体验最好的语言. 良好的开发体验加上优秀的开发效率, ROR是值得你去使用的.
Q: 我想写一点小工具, 我应该用什么语言?
A: Python.</description></item><item><title>日志</title><link>https://sdttttt.github.io/blog/log-1/</link><pubDate>Sat, 19 Sep 2020 11:06:17 +0800</pubDate><guid>https://sdttttt.github.io/blog/log-1/</guid><description>目前还是个5月份刚毕业的应届生, 今年还是撞到了疫情这个时间口上, 工作真是相当的难找, 6月到7月的样子, 我去尝试去考驾照, 目前还在科目二这边卡着, 中间有空也是各种找单位去面试.
比较幸运, 我在8月初的时候收到了来自安恒信息的面试通知, 他们是一家上市公司, 规模也不小, 我也是被别人内推才有这个面试资格的, 面试一共三轮, 前两轮技术面试, 最后一轮综合面试, 第一轮技术面试大概就是问了我一些JVM原理, 以及编码思路, 还有一些我比较擅长的分布式存储的问题. 第一轮过的呢也还算惊险. 第二轮是在几天后, 问的内容基本上是一些JDK源码, 数据结构, 还有一些框架问题.我回答的还算是流畅, 也算是过了.可惜,最后一轮面试之前,因为安恒不招收985,211以外的应届生, 所以我被淘汰了.
后面每天在晚上投简历, 大概在一个月后, 又有新的面试来了, 一家叫做郦鸣科技的公司, 面试官问的都是一些业务处理逻辑, 身为应届生的我也是吃了亏, 因为我根本没有实际的工作经验. 不过我还是以试用生的身份进去了.
新人入职第一天就是先把公司项目的代码过一边, 看了他们公司的代码之后, 说实话, 我非常失望, 复杂的对象关系结构, 长冗的控制器函数, 以及空空如也的test文件夹, 我不知道他们的项目能维护多长时间, 可能是我的想法太极端了, 大学时的我就开始受到马丁福勒的软件设计思想的影响, 对维护性差的代码变得敏感起来. 我边读他们的代码, 边重构着. 就这样过了一个星期.
在这周里, 我还收到了来自电信和一家电子交易公司的面试通知, 我很高兴, 因为我对现在的工作并不感到满足, 在周五, 我请了假, 去面试, 电信这边很顺利, 面试官和我说, 他喜欢我的开源项目, 并且对我的CICD技术感兴趣, 而且他也不关心我的学历, 我真的很高兴.不过在录用之前,面试官说得先和上级汇报, 因为录不录用不是他能决定的.
下午, 我去了那家电子交易公司面试, 不过应届生在他们公司面试之前得先做试卷, 内容是关于Java的, 我有点吃惊, 不过我也发现了, 对于一些java代码的运行细节我还了解的不够清楚, 在这里又发现了自己的缺点, 我感到很满足. 试卷完成后, 就是面谈了, 面试官看起来接近30岁, 他先问了我的开源项目的问题, 接着是一些Java基础的问题, 最后又考了考我的业务能力, 他出了一个秒杀题, 我回答的并不算好, 应该只答对了一半.</description></item></channel></rss>